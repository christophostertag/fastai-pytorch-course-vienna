{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  2.322359  ,   0.83335324,   2.74767988,   0.35258093,\n",
       "         0.99735988,  -0.65314407,   1.27182843,   1.13261023,\n",
       "         2.09285409,   2.20049037,   0.53728016,   1.02384959,\n",
       "         1.07753924,   1.70095423,  -0.23055421,   0.44385472,\n",
       "         0.49916165,   0.03660899,   2.41143365,   0.23088854,\n",
       "        -0.34081466,  -1.59980067,  -1.33868222,  -1.84078217,\n",
       "        -4.74645875,  -4.56845489,  -6.49668505,  -8.12712031,\n",
       "        -8.679631  , -10.57407214,   1.15595271,   0.57226233,\n",
       "         4.98835721,   2.83862822,   2.64586765,   4.56768548,\n",
       "         5.69889952,   7.41500685,   7.90347182,   7.59561846])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr = np.concatenate([np.random.randn(20)+1,np.random.randn(10)-np.arange(10),np.random.randn(10)+np.arange(10)])\n",
    "lr_size = lr.shape[0]\n",
    "lr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "kernel = np.array([0.05,0.1,0.15,0.2,0.2,0.15,0.1,0.05])\n",
    "kernel_size = kernel.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr_smooth = np.hstack([np.array([ sum(kernel*lr[i:kernel_size+i]) for i in range(lr_size-kernel_size) ])])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(lr)\n",
    "plt.plot(np.arange(kernel_size//2,kernel_size//2+lr_smooth.shape[0]),lr_smooth)\n",
    "plt.scatter([list(lr_smooth).index(min(lr_smooth))+1+kernel_size//2],min(lr_smooth),c=\"red\",s=150)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[TerminalIPythonApp] WARNING | Subcommand `ipython nbconvert` is deprecated and will be removed in future versions.\n",
      "[TerminalIPythonApp] WARNING | You likely want to use `jupyter nbconvert` in the future\n",
      "[NbConvertApp] Converting notebook lr_finder.ipynb to html\n",
      "[NbConvertApp] Writing 303277 bytes to lr_finder.html\n"
     ]
    }
   ],
   "source": [
    "!ipython nbconvert lr_finder.ipynb --to html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
